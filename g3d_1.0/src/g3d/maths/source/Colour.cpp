#define _CRT_SECURE_NO_WARNINGS

#include "Colour.h"
#include <string.h>
#include <stdio.h>

CG3DColour CG3DColour::g_Black(0,0,0,255);
CG3DColour CG3DColour::g_White(255,255,255,255);

struct ColourTable {
	const char* m_Name;
	unsigned char m_R, m_G, m_B;
};
static ColourTable g_ColourTable[] = {
	{"IndianRed", 0xCD, 0x5C, 0x5C},
	{"LightCoral", 0xF0, 0x80, 0x80},
	{"Salmon", 0xFA, 0x80, 0x72},
	{"DarkSalmon", 0xE9, 0x96, 0x7A},
	{"LightSalmon", 0xFF, 0xA0, 0x7A},
	{"Red", 0xFF, 0x00, 0x00},
	{"Crimson", 0xDC, 0x14, 0x3C},
	{"FireBrick", 0xB2, 0x22, 0x22},
	{"DarkRed", 0x8B, 0x00, 0x00},
	{"Pink", 0xFF, 0xC0, 0xCB},
	{"LightPink", 0xFF, 0xB6, 0xC1},
	{"HotPink", 0xFF, 0x69, 0xB4},
	{"DeepPink", 0xFF, 0x14, 0x93},
	{"MediumVioletRed", 0xC7, 0x15, 0x85},
	{"PaleVioletRed", 0xDB, 0x70, 0x93},
	{"LightSalmon", 0xFF, 0xA0, 0x7A},
	{"Coral", 0xFF, 0x7F, 0x50},
	{"Tomato", 0xFF, 0x63, 0x47},
	{"OrangeRed", 0xFF, 0x45, 0x00},
	{"DarkOrange", 0xFF, 0x8C, 0x00},
	{"Orange", 0xFF, 0xA5, 0x00},
	{"Gold", 0xFF, 0xD7, 0x00},
	{"Yellow", 0xFF, 0xFF, 0x00},
	{"LightYellow", 0xFF, 0xFF, 0xE0},
	{"LemonChiffon", 0xFF, 0xFA, 0xCD},
	{"LightGoldenrodYellow", 0xFA, 0xFA, 0xD2},
	{"PapayaWhip", 0xFF, 0xEF, 0xD5},
	{"Moccasin", 0xFF, 0xE4, 0xB5},
	{"PeachPuff", 0xFF, 0xDA, 0xB9},
	{"PaleGoldenrod", 0xEE, 0xE8, 0xAA},
	{"Khaki", 0xF0, 0xE6, 0x8C},
	{"DarkKhaki", 0xBD, 0xB7, 0x6B},
	{"Lavender", 0xE6, 0xE6, 0xFA},
	{"Thistle", 0xD8, 0xBF, 0xD8},
	{"Plum", 0xDD, 0xA0, 0xDD},
	{"Violet", 0xEE, 0x82, 0xEE},
	{"Orchid", 0xDA, 0x70, 0xD6},
	{"Fuchsia", 0xFF, 0x00, 0xFF},
	{"Magenta", 0xFF, 0x00, 0xFF},
	{"MediumOrchid", 0xBA, 0x55, 0xD3},
	{"MediumPurple", 0x93, 0x70, 0xDB},
	{"BlueViolet", 0x8A, 0x2B, 0xE2},
	{"DarkViolet", 0x94, 0x00, 0xD3},
	{"DarkOrchid", 0x99, 0x32, 0xCC},
	{"DarkMagenta", 0x8B, 0x00, 0x8B},
	{"Purple", 0x80, 0x00, 0x80},
	{"Indigo", 0x4B, 0x00, 0x82},
	{"DarkSlateBlue", 0x48, 0x3D, 0x8B},
	{"SlateBlue", 0x6A, 0x5A, 0xCD},
	{"MediumSlateBlue", 0x7B, 0x68, 0xEE},
	{"GreenYellow", 0xAD, 0xFF, 0x2F},
	{"Chartreuse", 0x7F, 0xFF, 0x00},
	{"LawnGreen", 0x7C, 0xFC, 0x00},
	{"Lime", 0x00, 0xFF, 0x00},
	{"LimeGreen", 0x32, 0xCD, 0x32},
	{"PaleGreen", 0x98, 0xFB, 0x98},
	{"LightGreen", 0x90, 0xEE, 0x90},
	{"MediumSpringGreen", 0x00, 0xFA, 0x9A},
	{"SpringGreen", 0x00, 0xFF, 0x7F},
	{"MediumSeaGreen", 0x3C, 0xB3, 0x71},
	{"SeaGreen", 0x2E, 0x8B, 0x57},
	{"ForestGreen", 0x22, 0x8B, 0x22},
	{"Green", 0x00, 0x80, 0x00},
	{"DarkGreen", 0x00, 0x64, 0x00},
	{"YellowGreen", 0x9A, 0xCD, 0x32},
	{"OliveDrab", 0x6B, 0x8E, 0x23},
	{"Olive", 0x80, 0x80, 0x00},
	{"DarkOliveGreen", 0x55, 0x6B, 0x2F},
	{"MediumAquamarine", 0x66, 0xCD, 0xAA},
	{"DarkSeaGreen", 0x8F, 0xBC, 0x8F},
	{"LightSeaGreen", 0x20, 0xB2, 0xAA},
	{"DarkCyan", 0x00, 0x8B, 0x8B},
	{"Teal", 0x00, 0x80, 0x80},
	{"Aqua", 0x00, 0xFF, 0xFF},
	{"Cyan", 0x00, 0xFF, 0xFF},
	{"LightCyan", 0xE0, 0xFF, 0xFF},
	{"PaleTurquoise", 0xAF, 0xEE, 0xEE},
	{"Aquamarine", 0x7F, 0xFF, 0xD4},
	{"Turquoise", 0x40, 0xE0, 0xD0},
	{"MediumTurquoise", 0x48, 0xD1, 0xCC},
	{"DarkTurquoise", 0x00, 0xCE, 0xD1},
	{"CadetBlue", 0x5F, 0x9E, 0xA0},
	{"SteelBlue", 0x46, 0x82, 0xB4},
	{"LightSteelBlue", 0xB0, 0xC4, 0xDE},
	{"PowderBlue", 0xB0, 0xE0, 0xE6},
	{"LightBlue", 0xAD, 0xD8, 0xE6},
	{"SkyBlue", 0x87, 0xCE, 0xEB},
	{"LightSkyBlue", 0x87, 0xCE, 0xFA},
	{"DeepSkyBlue", 0x00, 0xBF, 0xFF},
	{"DodgerBlue", 0x1E, 0x90, 0xFF},
	{"CornflowerBlue", 0x64, 0x95, 0xED},
	{"RoyalBlue", 0x41, 0x69, 0xE1},
	{"Blue", 0x00, 0x00, 0xFF},
	{"MediumBlue", 0x00, 0x00, 0xCD},
	{"DarkBlue", 0x00, 0x00, 0x8B},
	{"Navy", 0x00, 0x00, 0x80},
	{"MidnightBlue", 0x19, 0x19, 0x70},
	{"Cornsilk", 0xFF, 0xF8, 0xDC},
	{"BlanchedAlmond", 0xFF, 0xEB, 0xCD},
	{"Bisque", 0xFF, 0xE4, 0xC4},
	{"NavajoWhite", 0xFF, 0xDE, 0xAD},
	{"Wheat", 0xF5, 0xDE, 0xB3},
	{"BurlyWood", 0xDE, 0xB8, 0x87},
	{"Tan", 0xD2, 0xB4, 0x8C},
	{"RosyBrown", 0xBC, 0x8F, 0x8F},
	{"SandyBrown", 0xF4, 0xA4, 0x60},
	{"Goldenrod", 0xDA, 0xA5, 0x20},
	{"DarkGoldenrod", 0xB8, 0x86, 0x0B},
	{"Peru", 0xCD, 0x85, 0x3F},
	{"Chocolate", 0xD2, 0x69, 0x1E},
	{"SaddleBrown", 0x8B, 0x45, 0x13},
	{"Sienna", 0xA0, 0x52, 0x2D},
	{"Brown", 0xA5, 0x2A, 0x2A},
	{"Maroon", 0x80, 0x00, 0x00},
	{"White", 0xFF, 0xFF, 0xFF},
	{"Snow", 0xFF, 0xFA, 0xFA},
	{"Honeydew", 0xF0, 0xFF, 0xF0},
	{"MintCream", 0xF5, 0xFF, 0xFA},
	{"Azure", 0xF0, 0xFF, 0xFF},
	{"AliceBlue", 0xF0, 0xF8, 0xFF},
	{"GhostWhite", 0xF8, 0xF8, 0xFF},
	{"WhiteSmoke", 0xF5, 0xF5, 0xF5},
	{"Seashell", 0xFF, 0xF5, 0xEE},
	{"Beige", 0xF5, 0xF5, 0xDC},
	{"OldLace", 0xFD, 0xF5, 0xE6},
	{"FloralWhite", 0xFF, 0xFA, 0xF0},
	{"Ivory", 0xFF, 0xFF, 0xF0},
	{"AntiqueWhite", 0xFA, 0xEB, 0xD7},
	{"Linen", 0xFA, 0xF0, 0xE6},
	{"LavenderBlush", 0xFF, 0xF0, 0xF5},
	{"MistyRose", 0xFF, 0xE4, 0xE1},
	{"Gainsboro", 0xDC, 0xDC, 0xDC},
	{"LightGrey", 0xD3, 0xD3, 0xD3},
	{"Silver", 0xC0, 0xC0, 0xC0},
	{"DarkGray", 0xA9, 0xA9, 0xA9},
	{"Gray", 0x80, 0x80, 0x80},
	{"DimGray", 0x69, 0x69, 0x69},
	{"LightSlateGray", 0x77, 0x88, 0x99},
	{"SlateGray", 0x70, 0x80, 0x90},
	{"DarkSlateGray", 0x2F, 0x4F, 0x4F},
	{"Black", 0x00, 0x00, 0x00},
	{NULL, 0x00, 0x00, 0x00},
};

void CG3DColour::Set(CG3DVector4 colour)
{
	m_R = (unsigned char)(colour.x/255.0f);
	m_G = (unsigned char)(colour.y/255.0f);
	m_B = (unsigned char)(colour.z/255.0f);
	m_A = (unsigned char)(colour.w/255.0f);
}
void CG3DColour::Set(CG3DVector3 colour)
{
	m_R = (unsigned char)(colour.x/255.0f);
	m_G = (unsigned char)(colour.y/255.0f);
	m_B = (unsigned char)(colour.z/255.0f);
	m_A = 255;
}

unsigned int ReadHex(char c)
{
	if(c>='0' && c<='9')
		return c-'0';
	else if(c>='a' && c<='f')
		return c+10-'a';
	else if(c>='A' && c<='A')
		return c+10-'A';
	return 0;
}

void CG3DColour::Set(const char* str)
{
	unsigned int r, g, b, a;
	if (str[0] == '#')
	{
		switch (strlen(str))
		{
			case 4: //#rgb
				r=ReadHex(str[1]);
				g=ReadHex(str[2]);
				b=ReadHex(str[3]);
				Set(r + (r<<4), g + (g<<4), b + (b<<4));
				return;
			case 5: //#argb
				a=ReadHex(str[1]);
				r=ReadHex(str[2]);
				g=ReadHex(str[3]);
				b=ReadHex(str[4]);
				Set(r + (r<<4), g + (g<<4), b + (b<<4), a + (a<<4));
				return;
			case 7: //#rrggbb
				r=(ReadHex(str[1])<<4) + ReadHex(str[2]);
				g=(ReadHex(str[3])<<4) + ReadHex(str[4]);
				b=(ReadHex(str[5])<<4) + ReadHex(str[6]);
				Set(r, g, b);
				return;
			case 9: //#aarrggbb
				a=(ReadHex(str[1])<<4) + ReadHex(str[2]);
				r=(ReadHex(str[3])<<4) + ReadHex(str[4]);
				g=(ReadHex(str[5])<<4) + ReadHex(str[6]);
				b=(ReadHex(str[7])<<4) + ReadHex(str[8]);
				Set(r, g, b, a);
				return;
		}
	}
	for (int i=0; g_ColourTable[i].m_Name!=NULL; i++)
		if(!strcmp(str, g_ColourTable[i].m_Name))
		{
			Set(g_ColourTable[i].m_R, g_ColourTable[i].m_G, g_ColourTable[i].m_B);
			return;
		}

	float fr=0, fg=0, fb=0, fa=1.0f;
	sscanf(str, "%f %f %f %f", &fr, &fg, &fb, &fa); 

	Set((unsigned char)(fr*255.0f), (unsigned char)(fg*255.0f), (unsigned char)(fb*255.0f), (unsigned char)(fa*255.0f));
	return;
}
